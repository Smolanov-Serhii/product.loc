/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ (function(module) {

eval("var token = $('meta[name=\"csrf-token\"]').attr('content');\nvar upload_link = '/admin/upload/image';\n\nfunction uploadImage(image, editor) {\n  var data = new FormData();\n  data.append(\"image\", image);\n  data.append('_token', token);\n  $.ajax({\n    url: upload_link,\n    cache: false,\n    contentType: false,\n    processData: false,\n    data: data,\n    type: \"post\",\n    success: function success(data) {\n      var image = \"<picture>\\n                <source srcSet=\\\"/uploads/\".concat(data.urls['webp'], \"\\\" type=\\\"image/webp\\\">\\n                <img src=\\\"/uploads/\").concat(data.urls['original'], \"\\\" alt=\\\"\\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435\\\"/>\\n            </picture>\");\n      $(editor).summernote(\"pasteHTML\", image);\n    },\n    error: function error(data) {\n      console.log('error', data);\n    }\n  });\n}\n\nvar summernote_config = {\n  toolbar: [['style', ['style']], ['font', ['bold', 'underline', 'clear']], ['fontname', ['fontname']], ['fontsize', ['fontsize']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture', 'video']], ['view', ['fullscreen', 'codeview', 'help']]],\n  popover: false,\n  callbacks: {\n    onImageUpload: function onImageUpload(files) {\n      uploadImage(files[0], this);\n    }\n  }\n};\nmodule.exports = {\n  module: {\n    rules: [{\n      // You can use `regexp`\n      // test: /vendor\\.js/$\n      test: /\\.css$/,\n      loader: 'exports-loader',\n      use: ['style-loader', 'css-loader'] // options: {\n      //     exports: 'myFunction',\n      // },\n\n    }]\n  },\n  token: token,\n  summernote_config: summernote_config\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwLmpzP2NlZDYiXSwibmFtZXMiOlsidG9rZW4iLCIkIiwiYXR0ciIsInVwbG9hZF9saW5rIiwidXBsb2FkSW1hZ2UiLCJpbWFnZSIsImVkaXRvciIsImRhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsImFqYXgiLCJ1cmwiLCJjYWNoZSIsImNvbnRlbnRUeXBlIiwicHJvY2Vzc0RhdGEiLCJ0eXBlIiwic3VjY2VzcyIsInVybHMiLCJzdW1tZXJub3RlIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwic3VtbWVybm90ZV9jb25maWciLCJ0b29sYmFyIiwicG9wb3ZlciIsImNhbGxiYWNrcyIsIm9uSW1hZ2VVcGxvYWQiLCJmaWxlcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJydWxlcyIsInRlc3QiLCJsb2FkZXIiLCJ1c2UiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLEtBQUssR0FBR0MsQ0FBQyxDQUFDLHlCQUFELENBQUQsQ0FBNkJDLElBQTdCLENBQWtDLFNBQWxDLENBQWQ7QUFDQSxJQUFNQyxXQUFXLEdBQUcscUJBQXBCOztBQUVBLFNBQVNDLFdBQVQsQ0FBcUJDLEtBQXJCLEVBQTRCQyxNQUE1QixFQUFvQztBQUVoQyxNQUFJQyxJQUFJLEdBQUcsSUFBSUMsUUFBSixFQUFYO0FBRUFELEVBQUFBLElBQUksQ0FBQ0UsTUFBTCxDQUFZLE9BQVosRUFBcUJKLEtBQXJCO0FBQ0FFLEVBQUFBLElBQUksQ0FBQ0UsTUFBTCxDQUFZLFFBQVosRUFBc0JULEtBQXRCO0FBRUFDLEVBQUFBLENBQUMsQ0FBQ1MsSUFBRixDQUFPO0FBQ0hDLElBQUFBLEdBQUcsRUFBRVIsV0FERjtBQUVIUyxJQUFBQSxLQUFLLEVBQUUsS0FGSjtBQUdIQyxJQUFBQSxXQUFXLEVBQUUsS0FIVjtBQUlIQyxJQUFBQSxXQUFXLEVBQUUsS0FKVjtBQUtIUCxJQUFBQSxJQUFJLEVBQUVBLElBTEg7QUFNSFEsSUFBQUEsSUFBSSxFQUFFLE1BTkg7QUFPSEMsSUFBQUEsT0FBTyxFQUFFLGlCQUFTVCxJQUFULEVBQWU7QUFFcEIsVUFBSUYsS0FBSyxrRUFDc0JFLElBQUksQ0FBQ1UsSUFBTCxDQUFVLE1BQVYsQ0FEdEIsMEVBRWdCVixJQUFJLENBQUNVLElBQUwsQ0FBVSxVQUFWLENBRmhCLDBGQUFUO0FBS0FoQixNQUFBQSxDQUFDLENBQUNLLE1BQUQsQ0FBRCxDQUFVWSxVQUFWLENBQXFCLFdBQXJCLEVBQWtDYixLQUFsQztBQUNILEtBZkU7QUFnQkhjLElBQUFBLEtBQUssRUFBRSxlQUFTWixJQUFULEVBQWU7QUFDbEJhLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVosRUFBcUJkLElBQXJCO0FBQ0g7QUFsQkUsR0FBUDtBQW9CSDs7QUFFRCxJQUFNZSxpQkFBaUIsR0FBRztBQUN0QkMsRUFBQUEsT0FBTyxFQUFFLENBQ0wsQ0FBQyxPQUFELEVBQVUsQ0FBQyxPQUFELENBQVYsQ0FESyxFQUVMLENBQUMsTUFBRCxFQUFTLENBQUMsTUFBRCxFQUFTLFdBQVQsRUFBc0IsT0FBdEIsQ0FBVCxDQUZLLEVBR0wsQ0FBQyxVQUFELEVBQWEsQ0FBQyxVQUFELENBQWIsQ0FISyxFQUlMLENBQUMsVUFBRCxFQUFhLENBQUMsVUFBRCxDQUFiLENBSkssRUFLTCxDQUFDLE9BQUQsRUFBVSxDQUFDLE9BQUQsQ0FBVixDQUxLLEVBTUwsQ0FBQyxNQUFELEVBQVMsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLFdBQWIsQ0FBVCxDQU5LLEVBT0wsQ0FBQyxPQUFELEVBQVUsQ0FBQyxPQUFELENBQVYsQ0FQSyxFQVFMLENBQUMsUUFBRCxFQUFXLENBQUMsTUFBRCxFQUFTLFNBQVQsRUFBb0IsT0FBcEIsQ0FBWCxDQVJLLEVBU0wsQ0FBQyxNQUFELEVBQVMsQ0FBQyxZQUFELEVBQWUsVUFBZixFQUEyQixNQUEzQixDQUFULENBVEssQ0FEYTtBQVl0QkMsRUFBQUEsT0FBTyxFQUFFLEtBWmE7QUFhdEJDLEVBQUFBLFNBQVMsRUFBRTtBQUNQQyxJQUFBQSxhQUFhLEVBQUUsdUJBQVNDLEtBQVQsRUFBZ0I7QUFDM0J2QixNQUFBQSxXQUFXLENBQUN1QixLQUFLLENBQUMsQ0FBRCxDQUFOLEVBQVcsSUFBWCxDQUFYO0FBQ0g7QUFITTtBQWJXLENBQTFCO0FBb0JBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkQsRUFBQUEsTUFBTSxFQUFFO0FBQ0pFLElBQUFBLEtBQUssRUFBRSxDQUNIO0FBQ0k7QUFDQTtBQUNBQyxNQUFBQSxJQUFJLEVBQUUsUUFIVjtBQUlJQyxNQUFBQSxNQUFNLEVBQUUsZ0JBSlo7QUFLSUMsTUFBQUEsR0FBRyxFQUFFLENBQUMsY0FBRCxFQUFpQixZQUFqQixDQUxULENBTUk7QUFDQTtBQUNBOztBQVJKLEtBREc7QUFESCxHQURLO0FBZWJqQyxFQUFBQSxLQUFLLEVBQUVBLEtBZk07QUFnQmJzQixFQUFBQSxpQkFBaUIsRUFBRUE7QUFoQk4sQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0b2tlbiA9ICQoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5hdHRyKCdjb250ZW50Jyk7XHJcbmNvbnN0IHVwbG9hZF9saW5rID0gJy9hZG1pbi91cGxvYWQvaW1hZ2UnO1xyXG5cclxuZnVuY3Rpb24gdXBsb2FkSW1hZ2UoaW1hZ2UsIGVkaXRvcikge1xyXG5cclxuICAgIHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcblxyXG4gICAgZGF0YS5hcHBlbmQoXCJpbWFnZVwiLCBpbWFnZSk7XHJcbiAgICBkYXRhLmFwcGVuZCgnX3Rva2VuJywgdG9rZW4pO1xyXG5cclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiB1cGxvYWRfbGluayxcclxuICAgICAgICBjYWNoZTogZmFsc2UsXHJcbiAgICAgICAgY29udGVudFR5cGU6IGZhbHNlLFxyXG4gICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcclxuICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgIHR5cGU6IFwicG9zdFwiLFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBpbWFnZSA9IGA8cGljdHVyZT5cclxuICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3JjU2V0PVwiL3VwbG9hZHMvJHtkYXRhLnVybHNbJ3dlYnAnXX1cIiB0eXBlPVwiaW1hZ2Uvd2VicFwiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIvdXBsb2Fkcy8ke2RhdGEudXJsc1snb3JpZ2luYWwnXX1cIiBhbHQ9XCLQvtC/0LjRgdCw0L3QuNC1XCIvPlxyXG4gICAgICAgICAgICA8L3BpY3R1cmU+YDtcclxuXHJcbiAgICAgICAgICAgICQoZWRpdG9yKS5zdW1tZXJub3RlKFwicGFzdGVIVE1MXCIsIGltYWdlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5jb25zdCBzdW1tZXJub3RlX2NvbmZpZyA9IHtcclxuICAgIHRvb2xiYXI6IFtcclxuICAgICAgICBbJ3N0eWxlJywgWydzdHlsZSddXSxcclxuICAgICAgICBbJ2ZvbnQnLCBbJ2JvbGQnLCAndW5kZXJsaW5lJywgJ2NsZWFyJ11dLFxyXG4gICAgICAgIFsnZm9udG5hbWUnLCBbJ2ZvbnRuYW1lJ11dLFxyXG4gICAgICAgIFsnZm9udHNpemUnLCBbJ2ZvbnRzaXplJ11dLFxyXG4gICAgICAgIFsnY29sb3InLCBbJ2NvbG9yJ11dLFxyXG4gICAgICAgIFsncGFyYScsIFsndWwnLCAnb2wnLCAncGFyYWdyYXBoJ11dLFxyXG4gICAgICAgIFsndGFibGUnLCBbJ3RhYmxlJ11dLFxyXG4gICAgICAgIFsnaW5zZXJ0JywgWydsaW5rJywgJ3BpY3R1cmUnLCAndmlkZW8nXV0sXHJcbiAgICAgICAgWyd2aWV3JywgWydmdWxsc2NyZWVuJywgJ2NvZGV2aWV3JywgJ2hlbHAnXV0sXHJcbiAgICBdLFxyXG4gICAgcG9wb3ZlcjogZmFsc2UsXHJcbiAgICBjYWxsYmFja3M6IHtcclxuICAgICAgICBvbkltYWdlVXBsb2FkOiBmdW5jdGlvbihmaWxlcykge1xyXG4gICAgICAgICAgICB1cGxvYWRJbWFnZShmaWxlc1swXSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgbW9kdWxlOiB7XHJcbiAgICAgICAgcnVsZXM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiB1c2UgYHJlZ2V4cGBcclxuICAgICAgICAgICAgICAgIC8vIHRlc3Q6IC92ZW5kb3JcXC5qcy8kXHJcbiAgICAgICAgICAgICAgICB0ZXN0OiAvXFwuY3NzJC8sXHJcbiAgICAgICAgICAgICAgICBsb2FkZXI6ICdleHBvcnRzLWxvYWRlcicsXHJcbiAgICAgICAgICAgICAgICB1c2U6IFsnc3R5bGUtbG9hZGVyJywgJ2Nzcy1sb2FkZXInXVxyXG4gICAgICAgICAgICAgICAgLy8gb3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGV4cG9ydHM6ICdteUZ1bmN0aW9uJyxcclxuICAgICAgICAgICAgICAgIC8vIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICB0b2tlbjogdG9rZW4sXHJcbiAgICBzdW1tZXJub3RlX2NvbmZpZzogc3VtbWVybm90ZV9jb25maWdcclxufTtcclxuXHJcbiJdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/js/blocks/list.js":
/*!*************************************!*\
  !*** ./resources/js/blocks/list.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("var _require = __webpack_require__(/*! ../app.js */ \"./resources/js/app.js\"),\n    token = _require.token,\n    summernote_config = _require.summernote_config; // ************\n// ************\n// REMOVE BLOCK\n// ************\n// ************\n\n\n$(document).on('click', '.remove-block', function (e) {\n  e.preventDefault();\n  var delete_button = $('#deleteBlock')[0];\n  delete_button.dataset.url = this.dataset.url;\n  delete_button.dataset.block_id = this.dataset.block_id;\n  return;\n});\n$('#deleteBlock').on('click', function () {\n  var block_id = this.dataset.block_id;\n  $.ajax({\n    method: 'POST',\n    url: this.dataset.url,\n    data: {\n      _token: token\n    },\n    success: function success(data) {\n      $('#confirmDeleteBlock').modal('hide');\n      $(\"#\".concat(block_id)).remove();\n      $(document).Toasts('create', {\n        \"class\": 'bg-danger',\n        title: 'Статус',\n        subtitle: 'OK',\n        body: 'Блок удален',\n        autohide: true,\n        delay: 2e3\n      });\n    }\n  });\n}); // ************\n// ************\n// EDIT BLOCK CONTENT\n// ************\n// ************\n\n$(document).on('click', '.edit-content', function (e) {\n  $('#form_spiner').show();\n  $('.carousel').carousel(); // console.log(e);\n  // console.log(this.dataset.url);\n  // return false;\n\n  $.ajax({\n    method: 'get',\n    url: this.dataset.url,\n    // data: method == 'post' ? {'_token': token} : {},\n    success: function success(data) {\n      $('#form_spiner').hide();\n      $('#modal_body')[0].innerHTML = data.form;\n      $(\".iterations\").sortable({\n        containment: \"parent\",\n        items: \"> div\",\n        handle: \".move\",\n        tolerance: \"pointer\",\n        cursor: \"move\",\n        opacity: 0.7,\n        revert: 300,\n        placeholder: \"movable-placeholder\",\n        start: function start(e, ui) {\n          alert(2);\n          ui.placeholder.height(ui.item[0].clientHeight);\n          ui.placeholder.width(ui.item[0].clientWidth * .8);\n        },\n        update: function update(event, ui) {\n          alert(0);\n\n          for (var i = 0; i < event.target.children.length; i++) {\n            $(event.target.children[i]).find('input.order')[0].value = i + 1;\n          }\n        }\n      }); // $(\".iterations\").disableSelection();\n\n      $('.editor').each(function (element) {\n        var id = this.id;\n        $(\"#\".concat(id)).summernote(summernote_config);\n        $(\"#\".concat(id))[0].value = $(\"#\".concat(id)).summernote('code');\n        $(\"#\".concat(id)).on(\"summernote.change\", function (e) {\n          // callback as jquery custom event\n          $(\"#\".concat(id))[0].value = $(\"#\".concat(id)).summernote('code');\n        });\n      }); // $(\".iterations\").sortable({\n      //     items: \"> div\",\n      //     tolerance: \"pointer\",\n      //     containment: \"parent\",\n      //     cursor: \"move\",\n      //     opacity: 0.7,\n      //     revert: 300,\n      //     delay: 150,\n      //     placeholder: \"movable-placeholder\",\n      //     start: function(e, ui) {\n      //         ui.placeholder.height(ui.helper.outerHeight());\n      //     },\n      //\n      // });\n    }\n  });\n}); // ************\n// ************\n// UPDATE BLOCK STATUS\n// ************\n// ************\n\n$(document).on('change', '.enable-block-switcher', function () {\n  var switcher = this,\n      class_name,\n      body;\n  $(\"#\".concat(this.dataset.block_id, \" .overlay\")).show();\n  $.ajax({\n    method: 'POST',\n    url: this.dataset.url,\n    data: {\n      _token: token,\n      enabled: this.checked * 1\n    },\n    success: function success(data) {\n      // $(`#${switcher.dataset.block_id}`)[0].outerHTML = data.html;\n      if (switcher.checked) {\n        class_name = 'bg-success';\n        body = 'Блок включен';\n      } else {\n        class_name = 'bg-danger';\n        body = 'Блок выключен';\n      }\n\n      $('#blockList').sortable('destroy');\n      $('#blockList')[0].outerHTML = data.html;\n      refreshSortable();\n      $(document).Toasts('create', {\n        \"class\": class_name,\n        title: 'Статус',\n        subtitle: 'OK',\n        body: body,\n        autohide: true,\n        delay: 2e3\n      });\n    }\n  });\n});\n$(document).on('click', '.save-content', function (e) {\n  $('#form_spiner').show();\n  var close_form = this.dataset.close_form;\n  var form = $('#contentForm')[0]; // $('.textarea .ql-editor').each(function () {\n\n  $('.editor').each(function () {\n    var id = this.id; // console.log($(`#${id}`));\n\n    $(\"#\".concat(id))[0].value = $(\"#\".concat(id)).summernote('code'); // $(`#hidden_${this.id}`)[0].value = Quill.find(this).root.innerHTML\n    // console.log(this.innerHTML)\n  }); // for(data_id in CKEDITOR.instances) {\n  //     let data =  CKEDITOR.instances[data_id].getData();\n  //     let textarea_element = $(`#${data_id}`)[0];\n  //\n  //     textarea_element.value = data;\n  // }\n  // CKEDITOR.instances.each(function () {\n  //\n  // })\n\n  var formData = new FormData(form);\n  formData.append('_token', token);\n  $.ajax({\n    method: 'POST',\n    url: form.action,\n    data: formData,\n    dataType: 'JSON',\n    contentType: false,\n    cache: false,\n    processData: false,\n    success: function success(data) {\n      $('#form_spiner').hide(); // console.log(data);\n\n      if (data.errors) {// alert.show()\n        // $.each(data.errors, function (key,value) {\n        //     alert.append(`<p>${value}</p>`);\n        // })\n      } else if (data.status) {\n        if (close_form) {\n          $('#contentFormModal').modal('toggle');\n        }\n\n        $(document).Toasts('create', {\n          \"class\": data.toasts[\"class\"],\n          title: data.toasts.title,\n          body: data.toasts.body,\n          position: 'bottomRight'\n        });\n      }\n    }\n  });\n});\n$(document).on('click', '.add-iteration', function (e) {\n  var _this = this;\n\n  $.ajax({\n    method: 'GET',\n    url: this.dataset.template_url,\n    success: function success(data) {\n      var element = document.createElement('template');\n      var id = \"template_\".concat(parseInt(Math.random() * 1e5));\n\n      _this.previousElementSibling.append(element);\n\n      element.outerHTML = data.html; // console.log(this.previousElementSibling)\n\n      for (var i = 0; i < _this.previousElementSibling.children.length; i++) {\n        $(_this.previousElementSibling.children[i]).find('input.order')[0].value = i + 1;\n      } // $('.iterations').each((i, e) => {\n      //     console.log(i,e)\n      // })\n      // for (let i = 0; i < event.target.children.length; i++) {\n      //     $(event.target.children[i]).find('input.order')[0].value = i+1;\n      // }\n\n\n      $(\"#option_editor_\".concat(data.u_id, \" .editor\")).each(function (element) {\n        var id = this.id;\n        $(\"#\".concat(id)).summernote(summernote_config);\n        $(\"#\".concat(id))[0].value = $(\"#\".concat(id)).summernote('code');\n        $(\"#\".concat(id)).on(\"summernote.change\", function (e) {\n          // callback as jquery custom event\n          $(\"#\".concat(id))[0].value = $(\"#\".concat(id)).summernote('code');\n        });\n      });\n    }\n  });\n});\n$(document).on('change', '.custom-file-input', function () {\n  var id = this.dataset.id;\n  var fr = new FileReader();\n  var selectedFile = this.files[0];\n\n  if (selectedFile) {\n    fr.readAsDataURL(selectedFile);\n\n    fr.onload = function (e) {\n      var img = document.getElementById(\"image_\".concat(id));\n      $(img).show();\n      img.src = this.result;\n    };\n  }\n}); // ************\n// ************\n// SORT AND DRAG BLOCK\n// ************\n// ************\n\nfunction refreshSortable() {\n  $(\"#blockList\").sortable({\n    revert: true,\n    update: function update(event, ui) {\n      var sortedIDs = $(\"#blockList\").sortable(\"toArray\");\n      $.ajax({\n        method: 'POST',\n        url: block_update_order_form_action,\n        data: {\n          _token: token,\n          sequence: sortedIDs\n        },\n        success: function success(data) {\n          $('#blockList').sortable('destroy');\n          $('#blockList')[0].outerHTML = data.html;\n          refreshSortable();\n          $(document).Toasts('create', {\n            \"class\": 'bg-success',\n            title: 'Статус',\n            subtitle: 'OK',\n            body: 'Последовательность блоков на странице успешно изменена',\n            autohide: true,\n            delay: 2e3\n          });\n        }\n      });\n    }\n  }).disableSelection();\n}\n\nrefreshSortable();\n$(\".template-item\").draggable({\n  connectToSortable: \"#blockList\",\n  helper: \"clone\",\n  stop: function stop(event, ui) {\n    $.ajax({\n      method: 'POST',\n      url: block_create_content_form_action,\n      data: {\n        _token: token,\n        enabled: 1,\n        block_template_id: event.target.dataset.template_id\n      },\n      success: function success(data) {\n        if (data.errors) {} else if (data.status) {\n          $('#blockList').sortable('destroy');\n          ui.helper[0].innerHTML = data.html;\n          ui.helper[0].id = data.block_id;\n          refreshSortable();\n        }\n      }\n    });\n  }\n});\n$(document).on('click', '.content.remove-iteration', function (e) {\n  e.preventDefault();\n\n  if (confirm('Are you sure?')) {\n    $.ajax({\n      method: 'DELETE',\n      data: {\n        _token: token\n      },\n      url: this.dataset.url,\n      success: function success(data) {\n        $(\"#\".concat(data.id)).remove();\n        $(document).Toasts('create', {\n          \"class\": data.toasts[\"class\"],\n          title: data.toasts.title,\n          body: data.toasts.body,\n          position: 'bottomRight'\n        });\n      }\n    });\n  }\n\n  return false;\n});\n$(document).on('click', '.content.remove-new-iteration', function (e) {\n  e.preventDefault();\n  $(\"#\".concat(this.dataset.id)).remove();\n  return false;\n});\n$(document).on('click', '.block.clear-value', function () {\n  $(\"#optionFile_\".concat(this.dataset.attr_id))[0].value = '';\n  $(\"#image_\".concat(this.dataset.attr_id))[0].src = '';\n  $(\"#image_\".concat(this.dataset.attr_id)).hide();\n  $('#contentForm').append(\"<input type=\\\"hidden\\\" name=\\\"clear_value[]\\\" value=\\\"\".concat(this.dataset.prop_id, \"\\\">\"));\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/blocks/list.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/blocks/list.js");
/******/ 	
/******/ })()
;