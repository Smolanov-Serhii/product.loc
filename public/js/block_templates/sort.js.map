{"version":3,"file":"/js/block_templates/sort.js","mappings":"YAAA,IAAMA,EAAQC,SAASC,eAAe,YAChCC,EAAUH,EAAMI,iBAAiB,MACjCC,EAAYL,EAAMM,cAAc,SAChCC,EAAOF,EAAUD,iBAAiB,MAGlCI,EAAaC,MAAMC,KAAKP,GAASQ,KAAI,SAASC,GAChD,MAAO,MAILC,EAAY,SAASC,EAAOC,GAG9B,MACS,WAFIZ,EAAQW,GAAOE,aAAa,aAG1BC,WAAWF,GAGXA,GAyCnB,GAAGG,QAAQC,KAAKhB,GAAS,SAASS,EAAQE,GACtCF,EAAOQ,iBAAiB,SAAS,YAtClB,SAASN,GAExB,IAAMO,EAAYb,EAAWM,IAAU,MAGjCQ,EAA4B,QAAdD,EAAuB,GAAK,EAE1CE,EAAUd,MAAMC,KAAKH,GAE3BgB,EAAQC,MAAK,SAASC,EAAMC,GACxB,IAAMC,EAAQF,EAAKrB,iBAAiB,MAAMU,GAAOc,UAC3CC,EAAQH,EAAKtB,iBAAiB,MAAMU,GAAOc,UAE3CE,EAAIjB,EAAUC,EAAOa,GACrBI,EAAIlB,EAAUC,EAAOe,GAE3B,QAAQ,GACJ,KAAKC,EAAIC,EAAG,OAAO,EAAIT,EACvB,KAAKQ,EAAIC,EAAG,OAAQ,EAAIT,EACxB,KAAKQ,IAAMC,EAAG,OAAO,MAK7B,GAAGb,QAAQC,KAAKZ,GAAM,SAASyB,GAC3B3B,EAAU4B,YAAYD,MAI1BxB,EAAWM,GAAuB,QAAdO,EAAsB,OAAS,MAGnDE,EAAQL,SAAQ,SAASgB,GACrB7B,EAAU8B,YAAYD,MAMtBE,CAAWtB,GACXuB,KAAKC,UAAUC,OAAO,iB","sources":["webpack:///./resources/js/block_templates/sort.js"],"sourcesContent":["const table = document.getElementById('sortable');\r\nconst headers = table.querySelectorAll('th');\r\nconst tableBody = table.querySelector('tbody');\r\nconst rows = tableBody.querySelectorAll('tr');\r\n\r\n// Направление сортировки\r\nconst directions = Array.from(headers).map(function(header) {\r\n    return '';\r\n});\r\n\r\n// Преобразовать содержимое данной ячейки в заданном столбце\r\nconst transform = function(index, content) {\r\n    // Получить тип данных столбца\r\n    const type = headers[index].getAttribute('data-type');\r\n    switch (type) {\r\n        case 'number':\r\n            return parseFloat(content);\r\n        case 'string':\r\n        default:\r\n            return content;\r\n    }\r\n};\r\n\r\nconst sortColumn = function(index) {\r\n    // Получить текущее направление\r\n    const direction = directions[index] || 'asc';\r\n\r\n    // Фактор по направлению\r\n    const multiplier = (direction === 'asc') ? 1 : -1;\r\n\r\n    const newRows = Array.from(rows);\r\n\r\n    newRows.sort(function(rowA, rowB) {\r\n        const cellA = rowA.querySelectorAll('td')[index].innerHTML;\r\n        const cellB = rowB.querySelectorAll('td')[index].innerHTML;\r\n\r\n        const a = transform(index, cellA);\r\n        const b = transform(index, cellB);\r\n\r\n        switch (true) {\r\n            case a > b: return 1 * multiplier;\r\n            case a < b: return -1 * multiplier;\r\n            case a === b: return 0;\r\n        }\r\n    });\r\n\r\n    // Удалить старые строки\r\n    [].forEach.call(rows, function(row) {\r\n        tableBody.removeChild(row);\r\n    });\r\n\r\n    // Поменять направление\r\n    directions[index] = direction === 'asc' ? 'desc' : 'asc';\r\n\r\n    // Добавить новую строку\r\n    newRows.forEach(function(newRow) {\r\n        tableBody.appendChild(newRow);\r\n    });\r\n};\r\n\r\n[].forEach.call(headers, function(header, index) {\r\n    header.addEventListener('click', function() {\r\n        sortColumn(index);\r\n        this.classList.toggle(\"clicked\");\r\n    });\r\n});"],"names":["table","document","getElementById","headers","querySelectorAll","tableBody","querySelector","rows","directions","Array","from","map","header","transform","index","content","getAttribute","parseFloat","forEach","call","addEventListener","direction","multiplier","newRows","sort","rowA","rowB","cellA","innerHTML","cellB","a","b","row","removeChild","newRow","appendChild","sortColumn","this","classList","toggle"],"sourceRoot":""}